[{"C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\index.tsx":"1","C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\reportWebVitals.ts":"2","C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\App.tsx":"3","C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\Config\\routes.ts":"4","C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\Components\\AppRoute.tsx":"5","C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\Pages\\Forgot\\ForgotPassword.tsx":"6","C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\Pages\\Forgot\\ResetPassword.tsx":"7","C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\Context\\index.tsx":"8","C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\Pages\\Home\\Home.tsx":"9","C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\Pages\\Navbar2\\Navbar2.tsx":"10","C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\Pages\\Login\\index.tsx":"11","C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\Pages\\NotFound\\index.tsx":"12","C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\Pages\\Dashboard\\index.tsx":"13","C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\Pages\\Generate\\index.tsx":"14","C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\Pages\\User_Uploads\\index.tsx":"15","C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\Pages\\Upload\\index.tsx":"16","C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\Context\\actions.tsx":"17","C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\Context\\context.tsx":"18","C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\Pages\\SingleCert\\index.tsx":"19","C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\Context\\reducer.tsx":"20","C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\Pages\\SignUp\\signup.tsx":"21","C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\Pages\\Verify\\verify.tsx":"22"},{"size":500,"mtime":1637982889584,"results":"23","hashOfConfig":"24"},{"size":425,"mtime":1637982890529,"results":"25","hashOfConfig":"24"},{"size":1304,"mtime":1638942055037,"results":"26","hashOfConfig":"24"},{"size":1121,"mtime":1638940046010,"results":"27","hashOfConfig":"24"},{"size":526,"mtime":1637982889175,"results":"28","hashOfConfig":"24"},{"size":2096,"mtime":1638946933869,"results":"29","hashOfConfig":"24"},{"size":3154,"mtime":1638946971310,"results":"30","hashOfConfig":"24"},{"size":233,"mtime":1637982889459,"results":"31","hashOfConfig":"24"},{"size":592,"mtime":1638255866727,"results":"32","hashOfConfig":"24"},{"size":2761,"mtime":1638947254341,"results":"33","hashOfConfig":"24"},{"size":3099,"mtime":1638947108221,"results":"34","hashOfConfig":"24"},{"size":223,"mtime":1637982890092,"results":"35","hashOfConfig":"24"},{"size":1067,"mtime":1638946904395,"results":"36","hashOfConfig":"24"},{"size":999,"mtime":1638947087474,"results":"37","hashOfConfig":"24"},{"size":1493,"mtime":1638948166808,"results":"38","hashOfConfig":"24"},{"size":20793,"mtime":1639464980134,"results":"39","hashOfConfig":"24"},{"size":1783,"mtime":1638946649289,"results":"40","hashOfConfig":"24"},{"size":971,"mtime":1637982889426,"results":"41","hashOfConfig":"24"},{"size":12289,"mtime":1639453820425,"results":"42","hashOfConfig":"24"},{"size":1542,"mtime":1638946705142,"results":"43","hashOfConfig":"24"},{"size":3754,"mtime":1639090702394,"results":"44","hashOfConfig":"24"},{"size":1869,"mtime":1639091233677,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"h0escr",{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"48"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"48"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"48"},"C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\index.tsx",[],["95","96"],"C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\reportWebVitals.ts",[],"C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\App.tsx",[],"C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\Config\\routes.ts",[],"C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\Components\\AppRoute.tsx",[],"C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\Pages\\Forgot\\ForgotPassword.tsx",[],"C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\Pages\\Forgot\\ResetPassword.tsx",[],"C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\Context\\index.tsx",[],"C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\Pages\\Home\\Home.tsx",[],"C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\Pages\\Navbar2\\Navbar2.tsx",[],"C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\Pages\\Login\\index.tsx",["97"],"import React, { useState } from \"react\";\n\nimport { loginUser, useAuthState, useAuthDispatch } from \"../../Context\";\n// import styles from \"./login.module.css\";\nimport Navbar2 from \"../Navbar2/Navbar2\";\nimport \"./login.css\";\nimport { AiFillEyeInvisible } from \"react-icons/ai\";\nimport { Link } from \"react-router-dom\";\n\nfunction Login(props) {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [visible, setVisible] = useState(false);\n\n  const dispatch = useAuthDispatch();\n  const { loading, errorMessage, successMessage }: any = useAuthState();\n\n  const handleLogin = async (e) => {\n    e.preventDefault();\n\n    try {\n      let res = await loginUser(dispatch, { email, password });\n      let user = localStorage.getItem(\"currentUser\")\n        ? JSON.parse(localStorage.getItem(\"currentUser\")).name\n        : \"\";\n      if (user) {\n        props.history.push(\"/dashboard\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  function toggleVisible(e) {\n    e.preventDefault();\n    setVisible(!visible);\n  }\n  return (\n    <>\n      <div>\n        <Navbar2 login={true} signup={false} />\n        <div className=\"main-c\">\n          <div className=\"bg-design\"></div>\n          <div className=\"login-box\">\n            <div className=\"login-h\">\n              An <span className=\"blue\">in-house</span> certificate generator.\n            </div>\n            <div>\n              {errorMessage ? <p className=\"error\">{errorMessage}</p> : null}\n\n              {successMessage ? (\n                <p className=\"success\">{successMessage}</p>\n              ) : null}\n            </div>\n\n            <form className=\"log-form\">\n              <div>\n                <input\n                  className=\"form-item\"\n                  type=\"email\"\n                  id=\"email\"\n                  value={email}\n                  placeholder=\"Enter Email\"\n                  onChange={(e) => setEmail(e.target.value)}\n                />\n              </div>\n              <div>\n                <input\n                  className=\"form-item\"\n                  type={visible ? \"text\" : \"password\"}\n                  placeholder=\"Enter Password\"\n                  id=\"password\"\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  disabled={loading}\n                />\n                <button\n                  className=\"toggle-button\"\n                  onClick={(e) => toggleVisible(e)}\n                >\n                  <AiFillEyeInvisible />\n                </button>\n              </div>\n              <button\n                className=\"submit-btn\"\n                type=\"submit\"\n                onClick={handleLogin}\n                disabled={loading}\n              >\n                Login\n              </button>\n              <div className=\"forgot\">\n                <Link to={\"/forgot\"} className=\"f-link\">\n                  Forgot Password?\n                </Link>\n              </div>\n            </form>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Login;\n","C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\Pages\\NotFound\\index.tsx",[],"C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\Pages\\Dashboard\\index.tsx",[],"C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\Pages\\Generate\\index.tsx",[],"C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\Pages\\User_Uploads\\index.tsx",[],"C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\Pages\\Upload\\index.tsx",["98"],"import { useState } from \"react\";\nimport \"./Upload.css\";\nimport axios from \"axios\";\nimport { useAuthState } from \"../../Context\";\nimport Navbar2 from \"../Navbar2/Navbar2\";\nimport qr from \"../../images/qrcode.png\";\n\nexport default function Upload() {\n  const userDetails = useAuthState();\n\n  let userId = userDetails.user.id;\n  const [cert, setCert] = useState(\"\");\n  const [type, setType] = useState(\"\");\n\n  const [qrTop, setqrTop] = useState<number>(0);\n  const [qrLeft, setqrLeft] = useState<number>(0);\n  const [qrW, setqrW] = useState<number>(0);\n  const [qrH, setqrH] = useState<number>(0);\n\n  const [nameTop, setNameTop] = useState<number>(0);\n  const [nameLeft, setNameLeft] = useState<number>(0);\n  const [nameW, setNameW] = useState<number>(0);\n\n  const [eventTop, setEventTop] = useState<number>(0);\n  const [eventLeft, setEventLeft] = useState<number>(0);\n  const [eventW, setEventW] = useState<number>(0);\n\n  const [dateTop, setDateTop] = useState<number>(0);\n  const [dateLeft, setDateLeft] = useState<number>(0);\n  const [dateW, setDateW] = useState<number>(0);\n\n  const [positionTop, setPositionTop] = useState<number>(0);\n  const [positionLeft, setPositionLeft] = useState<number>(0);\n  const [positionW, setPositionW] = useState<number>(0);\n\n  const [alert, setAlert] = useState<boolean>(false);\n\n  function onFileChange(e) {\n    setCert(e.target.files[0]);\n\n    console.log(\"In this\");\n    // @ts-ignore\n    var file = document.getElementById(\"file-inp\").files[0];\n    console.log(file);\n    var reader = new FileReader();\n    console.log(reader);\n    reader.onloadend = function () {\n      document.getElementById(\"set-bg\").style.backgroundImage =\n        \"url(\" + reader.result + \")\";\n    };\n    if (file) {\n      reader.readAsDataURL(file);\n    } else {\n    }\n    document.getElementById(\"up-btn\").style.visibility = \"hidden\";\n  }\n\n  function upload() {\n    const inp = document.getElementById(\"file-inp\");\n    inp.click();\n  }\n\n  function positionqrTop(e) {\n    setqrTop(parseInt(e.target.value));\n    const q = document.getElementById(\"qrc\");\n    q.style.top = e.target.value.toString() + \"px\";\n    q.style.visibility = \"visible\";\n    q.style.zIndex = \"10\";\n  }\n  function positionqrLeft(e) {\n    setqrLeft(parseInt(e.target.value));\n    const q = document.getElementById(\"qrc\");\n    q.style.left = e.target.value.toString() + \"px\";\n    console.log(nameLeft);\n    q.style.visibility = \"visible\";\n    q.style.zIndex = \"10\";\n  }\n\n  function qrWidth(e) {\n    setqrW(parseInt(e.target.value));\n    const q = document.getElementById(\"qrc\");\n    q.style.width = e.target.value.toString() + \"px\";\n    q.style.visibility = \"visible\";\n    q.style.zIndex = \"10\";\n  }\n  function qrHeight(e) {\n    setqrH(parseInt(e.target.value));\n\n    const q = document.getElementById(\"qrc\");\n    q.style.height = e.target.value.toString() + \"px\";\n    q.style.visibility = \"visible\";\n    q.style.zIndex = \"10\";\n  }\n\n  function positionNameTop(e) {\n    setNameTop(parseInt(e.target.value));\n\n    const name = document.getElementById(\"name\");\n    name.style.top = e.target.value.toString() + \"px\";\n    name.style.visibility = \"visible\";\n    name.style.zIndex = \"10\";\n    name.innerHTML = \"Person Name\";\n  }\n  function positionNameLeft(e) {\n    setNameLeft(parseInt(e.target.value));\n    const name = document.getElementById(\"name\");\n    name.style.left = e.target.value.toString() + \"px\";\n    console.log(nameLeft);\n    name.style.visibility = \"visible\";\n    name.style.zIndex = \"10\";\n    name.innerHTML = \"Person Name\";\n  }\n\n  function NameW(e) {\n    setNameW(parseInt(e.target.value));\n    const name = document.getElementById(\"name\");\n    name.style.width = e.target.value.toString() + \"px\";\n    name.style.visibility = \"visible\";\n    name.style.zIndex = \"10\";\n    name.innerHTML = \"Person Name\";\n  }\n\n  function positionEventTop(e) {\n    setEventTop(parseInt(e.target.value));\n    const event = document.getElementById(\"event\");\n    event.style.top = e.target.value.toString() + \"px\";\n    event.style.visibility = \"visible\";\n    event.style.zIndex = \"10\";\n    event.innerHTML = \"Event Name\";\n  }\n  function positionEventLeft(e) {\n    setEventLeft(parseInt(e.target.value));\n\n    const event = document.getElementById(\"event\");\n    event.style.left = e.target.value.toString() + \"px\";\n    event.style.visibility = \"visible\";\n    event.style.zIndex = \"10\";\n    event.innerHTML = \"Event Name\";\n  }\n\n  function EventW(e) {\n    setEventW(parseInt(e.target.value));\n\n    const event = document.getElementById(\"event\");\n    event.style.width = e.target.value.toString() + \"px\";\n    event.style.visibility = \"visible\";\n    event.style.zIndex = \"10\";\n    event.innerHTML = \"Event Name\";\n  }\n\n  function positionEventDateTop(e) {\n    setDateTop(parseInt(e.target.value));\n    const event = document.getElementById(\"e-date\");\n    event.style.top = e.target.value.toString() + \"px\";\n    event.style.visibility = \"visible\";\n    event.style.zIndex = \"10\";\n    event.innerHTML = \"01-01-2022\";\n  }\n  function positionEventDateLeft(e) {\n    setDateLeft(parseInt(e.target.value));\n    const eventDate = document.getElementById(\"e-date\");\n    eventDate.style.left = e.target.value.toString() + \"px\";\n    eventDate.style.visibility = \"visible\";\n    eventDate.style.zIndex = \"10\";\n    eventDate.innerHTML = \"01-01-2022\";\n  }\n  function EventDateW(e) {\n    setDateW(parseInt(e.target.value));\n    const eventDate = document.getElementById(\"e-date\");\n    eventDate.style.width = e.target.value.toString() + \"px\";\n    eventDate.style.visibility = \"visible\";\n    eventDate.style.zIndex = \"10\";\n    eventDate.innerHTML = \"01-01-2022\";\n  }\n\n  function positionPosTop(e) {\n    setPositionTop(parseInt(e.target.value));\n    const position = document.getElementById(\"position\");\n    position.style.top = e.target.value.toString() + \"px\";\n    position.style.visibility = \"visible\";\n    position.style.zIndex = \"10\";\n    position.innerHTML = \"1st\";\n  }\n  function positionPosLeft(e) {\n    setPositionLeft(parseInt(e.target.value));\n    const position = document.getElementById(\"position\");\n    position.style.left = e.target.value.toString() + \"px\";\n    position.style.visibility = \"visible\";\n    position.style.zIndex = \"10\";\n    position.innerHTML = \"1st\";\n  }\n  function PositionW(e) {\n    setPositionLeft(parseInt(e.target.value));\n    const position = document.getElementById(\"position\");\n    position.style.width = e.target.value.toString() + \"px\";\n    position.style.visibility = \"visible\";\n    position.style.zIndex = \"10\";\n    position.innerHTML = \"1st\";\n  }\n  const coordinates = {\n    name: [nameTop, nameLeft, nameW],\n    event: [eventTop, eventLeft, eventW],\n    date: [dateTop, dateLeft, dateW],\n    position: [positionTop, positionLeft, positionW],\n    qr: [qrTop, qrLeft, qrH, qrW],\n  };\n\n  const onSubmit = async (e) => {\n    e.preventDefault();\n    const formData = new FormData();\n    formData.append(\"certUrl\", cert);\n    console.log(formData);\n    await axios\n      .post(\"http://localhost:5000/api/cert/cert-upload\", formData)\n      .then(async (res: any) => {\n        console.log(res);\n        console.log(res.data._id);\n\n        var certDetailObj = {\n          certId: res.data._id,\n          category: type,\n          userId: userId,\n          coordinates: coordinates,\n        };\n        console.log(\"Hello\");\n        console.log(certDetailObj);\n        await axios\n          .put(\n            \"http://localhost:5000/api/cert/cert-upload-details\",\n            certDetailObj\n          )\n          .then((res) => {\n            console.log(res);\n            // window.alert(\"Certificate Uploaded Successfully\");\n            setAlert(true);\n            setTimeout(function () {\n              window.location.reload();\n            }, 2000);\n          })\n          .catch((err) => {\n            console.log(err);\n          });\n      });\n  };\n\n  console.log(userId);\n  return (\n    <div className=\"container\">\n      {alert && (\n        <div className=\"alert\">\n          Congratulations! Certifcate has been uploaded successfully!!\n        </div>\n      )}\n\n      <Navbar2 />\n      <div className=\"left-c\">\n        <div className=\"left-box\" id=\"set-bg\">\n          <div id=\"name\">Person Name</div>\n          <div id=\"event\">Event Name</div>\n          <div id=\"e-date\">01/01/21</div>\n          <div id=\"position\">2</div>\n          <img alt=\"qr\" src={qr} id=\"qrc\"></img>\n\n          <button className=\"up-btn\" id=\"up-btn\" onClick={upload}>\n            Choose a file\n          </button>\n        </div>\n\n        <button className=\"delete-up\" onClick={() => window.location.reload()}>\n          Delete Image\n        </button>\n      </div>\n      <div className=\"right-c\">\n        <form onSubmit={onSubmit}>\n          <div>\n            <input\n              className=\"upload-input\"\n              type=\"file\"\n              id=\"file-inp\"\n              onChange={onFileChange}\n            />\n          </div>\n          <div className=\"up-box\">\n            <select\n              onChange={(e) => setType(e.target.value)}\n              className=\"up-select\"\n            >\n              <option value=\"\">Select Type of Certificate</option>\n              <option value=\"wc\">WC Completion</option>\n              <option value=\"mc\">MC Completion</option>\n              <option value=\"org\">Organizing a Competition</option>\n              <option value=\"comp\">\n                Participating in or winning a Competition\n              </option>\n            </select>\n            {type && (\n              <div>\n                <div>\n                  <div className=\"row type-row\">\n                    <div>QRCODE:</div>\n                    <label className=\"type-label\">\n                      Coordinates for QRCODE:\n                    </label>\n                    <br />\n                    <div className=\"row input-row\">\n                      <label>Top:</label>\n                      <input\n                        className=\"type-input\"\n                        type=\"number\"\n                        onChange={(e) => positionqrTop(e)}\n                      ></input>\n                      <label>Left:</label>\n                      <input\n                        className=\"type-input\"\n                        type=\"number\"\n                        onChange={(e) => positionqrLeft(e)}\n                      ></input>\n                    </div>\n                    <div className=\"row input-row\" id=\"qr-row\">\n                      <label>Width:</label>\n                      <input\n                        className=\"type-input\"\n                        type=\"number\"\n                        onChange={(e) => qrWidth(e)}\n                      ></input>\n                      <label>Height:</label>\n                      <input\n                        className=\"type-input\"\n                        type=\"number\"\n                        onChange={(e) => qrHeight(e)}\n                      ></input>\n                    </div>\n                  </div>\n                </div>\n                {(type === \"wc\" || type === \"mc\") && (\n                  <div>\n                    <div className=\"row type-row\">\n                      <label className=\"type-label\">\n                        Enter Coordinates for name:\n                      </label>\n                      <br />\n                      <div className=\"row input-row\">\n                        <label>Top:</label>\n                        <input\n                          className=\"type-input\"\n                          type=\"number\"\n                          onChange={(e) => positionNameTop(e)}\n                        ></input>\n                        <label>Left:</label>\n                        <input\n                          className=\"type-input\"\n                          type=\"number\"\n                          onChange={(e) => positionNameLeft(e)}\n                        ></input>\n                        <label>Width:</label>\n                        <input\n                          className=\"type-input\"\n                          type=\"number\"\n                          onChange={(e) => NameW(e)}\n                        ></input>\n                      </div>\n                    </div>\n                  </div>\n                )}\n                {type === \"org\" && (\n                  <div>\n                    <div className=\"row type-row\">\n                      <label className=\"type-label\">\n                        Enter Coordinates for name:\n                      </label>\n                      <br />\n                      <div className=\"row input-row\">\n                        <label>Top:</label>\n                        <input\n                          className=\"type-input\"\n                          type=\"number\"\n                          onChange={(e) => positionNameTop(e)}\n                        ></input>\n                        <label>Left:</label>\n                        <input\n                          className=\"type-input\"\n                          type=\"number\"\n                          onChange={(e) => positionNameLeft(e)}\n                        ></input>\n                        <label>Width:</label>\n                        <input\n                          className=\"type-input\"\n                          type=\"number\"\n                          onChange={(e) => NameW(e)}\n                        ></input>\n                      </div>\n                    </div>\n                    <div className=\"row type-row\">\n                      <label className=\"type-label\">\n                        Enter Coordinates for Event Name:\n                      </label>\n                      <br />\n                      <div className=\"row input-row\">\n                        <label>Top:</label>\n                        <input\n                          className=\"type-input\"\n                          type=\"number\"\n                          onChange={(e) => positionEventTop(e)}\n                        ></input>\n                        <label>Left:</label>\n                        <input\n                          className=\"type-input\"\n                          type=\"number\"\n                          onChange={(e) => positionEventLeft(e)}\n                        ></input>\n                        <label>Width:</label>\n\n                        <input\n                          className=\"type-input\"\n                          type=\"number\"\n                          onChange={(e) => EventW(e)}\n                        ></input>\n                      </div>\n                    </div>\n                    <div className=\"row type-row\">\n                      <label className=\"type-label\">\n                        Enter Coordinates for Event Date:\n                      </label>\n                      <br />\n                      <div className=\"row input-row\">\n                        <label>Top:</label>\n                        <input\n                          className=\"type-input\"\n                          type=\"number\"\n                          onChange={(e) => positionEventDateTop(e)}\n                        ></input>\n                        <label>Left:</label>\n                        <input\n                          className=\"type-input\"\n                          type=\"number\"\n                          onChange={(e) => positionEventDateLeft(e)}\n                        ></input>\n                        <label>Width:</label>\n\n                        <input\n                          className=\"type-input\"\n                          type=\"number\"\n                          onChange={(e) => EventDateW(e)}\n                        ></input>\n                      </div>\n                    </div>\n                  </div>\n                )}{\" \"}\n                {type === \"comp\" && (\n                  <div>\n                    <div className=\"row type-row\">\n                      <label className=\"type-label\">\n                        Enter Coordinates for name:\n                      </label>\n                      <br />\n                      <div className=\"row input-row\">\n                        <label>Top:</label>\n                        <input\n                          className=\"type-input\"\n                          type=\"number\"\n                          onChange={(e) =>\n                            // setNameTop(parseInt(e.target.value)),\n                            positionNameTop(e)\n                          }\n                        ></input>\n                        <label>Left:</label>\n                        <input\n                          className=\"type-input\"\n                          type=\"number\"\n                          onChange={(e) => positionNameLeft(e)}\n                        ></input>\n                        <label>Width:</label>\n\n                        <input\n                          className=\"type-input\"\n                          type=\"number\"\n                          onChange={(e) => NameW(e)}\n                        ></input>\n                      </div>\n                    </div>\n                    <div className=\"row type-row\">\n                      <label className=\"type-label\">\n                        Enter Coordinates for Event Name:\n                      </label>\n                      <br />\n                      <div className=\"row input-row\">\n                        <label>Top:</label>\n                        <input\n                          className=\"type-input\"\n                          type=\"number\"\n                          onChange={(e) => positionEventTop(e)}\n                        ></input>\n                        <label>Left:</label>\n                        <input\n                          className=\"type-input\"\n                          type=\"number\"\n                          onChange={(e) => positionEventLeft(e)}\n                        ></input>\n                        <label>Width:</label>\n\n                        <input\n                          className=\"type-input\"\n                          type=\"number\"\n                          onChange={(e) => EventW(e)}\n                        ></input>\n                      </div>\n                    </div>\n                    <div className=\"row type-row\">\n                      <label className=\"type-label\">\n                        Enter Coordinates for Event Date:\n                      </label>\n                      <br />\n                      <div className=\"row input-row\">\n                        <label>Top:</label>\n                        <input\n                          className=\"type-input\"\n                          type=\"number\"\n                          onChange={(e) => positionEventDateTop(e)}\n                        ></input>\n                        <label>Left:</label>\n                        <input\n                          className=\"type-input\"\n                          type=\"number\"\n                          onChange={(e) => positionEventDateLeft(e)}\n                        ></input>\n                        <label>Width:</label>\n\n                        <input\n                          className=\"type-input\"\n                          type=\"number\"\n                          onChange={(e) => EventDateW(e)}\n                        ></input>\n                      </div>\n                    </div>{\" \"}\n                    <div className=\"row type-row\">\n                      <label className=\"type-label\">\n                        Enter Coordinates for Positon Won:\n                      </label>\n                      <br />\n                      <div className=\"row input-row\">\n                        <label>Top:</label>\n                        <input\n                          className=\"type-input\"\n                          type=\"number\"\n                          onChange={(e) => positionPosTop(e)}\n                        ></input>\n                        <label>Left:</label>\n                        <input\n                          className=\"type-input\"\n                          type=\"number\"\n                          onChange={(e) => positionPosLeft(e)}\n                        ></input>\n                        <label>Width:</label>\n                        <input\n                          className=\"type-input\"\n                          type=\"number\"\n                          onChange={(e) => PositionW(e)}\n                        ></input>\n                      </div>\n                    </div>\n                  </div>\n                )}\n                <div className=\"upload-info\">\n                  The height of the certificate is 700px x 500px, please enter\n                  all coordinates in px keeping this height and width in mind.\n                </div>\n                <div>\n                  <button type=\"submit\" className=\"submit-up\">\n                    Upload\n                  </button>\n                </div>\n              </div>\n            )}\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n}\n","C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\Context\\actions.tsx",[],"C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\Context\\context.tsx",[],"C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\Pages\\SingleCert\\index.tsx",["99","100","101","102","103"],"import React, { useState, useEffect, useRef } from \"react\";\nimport \"../Dashboard/dashboard.css\";\nimport axios from \"axios\";\nimport Navbar2 from \"../Navbar2/Navbar2\";\nimport QRCode from \"qrcode\";\nimport qrcode_1 from \"../../images/qrcode.png\";\nimport \"./singlecert.css\";\n\nexport default function SingleImage(props) {\n  const id = window.location.pathname.split(\"/\")[2];\n  QRCode.toDataURL(\"https://www.google.com/\")\n    .then((url) => {\n      // setLink(url);\n    })\n    .catch((err) => {\n      console.error(err);\n    });\n\n  // With async/await\n\n  const [csv, setCsv] = useState(\"\");\n  const [certUrl, setCertUrl] = useState(\"\");\n  const [arr2, setArr2] = useState([]);\n  const [subject, setSubject] = useState(\"\");\n  const [content, setContent] = useState(\"\");\n\n  const [coordinates, setCoordinates] = useState<any>([]);\n  const [show, setShow] = useState(false);\n  const [emailCount, setEmailCount] = useState(0);\n  const [final, setFinal] = useState(false);\n  const [type, setType] = useState(\"\");\n\n  const canvasRef = useRef(null);\n\n  function onFileChange(e) {\n    setCsv(e.target.files[0]);\n  }\n\n  useEffect(() => {\n    axios\n      .get(\"http://localhost:5000/api/cert/\" + id)\n      .then((response: any) => {\n        setCertUrl(response.data.certUrl);\n        setCoordinates(response.data.coordinates);\n        setType(response.data.category);\n        setFinal(true);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }, []);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    canvas.width = 700;\n    canvas.height = 500;\n\n    var background = new Image();\n    background.setAttribute(\"crossOrigin\", \"anonymous\");\n    background.src = certUrl;\n\n    background.onload = function () {\n      console.log(coordinates);\n      ctx.drawImage(background, 0, 0, 700, 500);\n      var img = new Image();\n      img.src = qrcode_1;\n      ctx.drawImage(\n        img,\n        coordinates.qr[1],\n        coordinates.qr[0],\n        coordinates.qr[3],\n        coordinates.qr[2]\n      );\n      ctx.font = \"20px Arial\";\n      ctx.textAlign = \"center\";\n      ctx.textBaseline = \"top\";\n      ctx.fillStyle = \"black\";\n      // ctx.drawImage(qr, 20, 422,50,50);\n      // ctx.fillText(\"Personffffff\", 200, 200);\n\n      if (type === \"wc\" || type === \"mc\") {\n        ctx.textAlign = \"center\";\n        ctx.fillText(\n          \"Person Name\",\n          coordinates.name[1] + coordinates.name[2] / 2,\n          coordinates.name[0]\n        );\n      }\n      if (type === \"org\") {\n        ctx.textAlign = \"center\";\n        ctx.fillText(\n          \"Person Name\",\n          coordinates.name[1] + coordinates.name[2] / 2,\n          coordinates.name[0]\n        );\n        ctx.fillText(\n          \"Event Name\",\n          coordinates.event[1] + coordinates.event[2] / 2,\n          coordinates.event[0]\n        );\n        ctx.fillText(\n          \"01/01/2021\",\n          coordinates.date[1] + coordinates.date[2] / 2,\n          coordinates.date[0]\n        );\n      }\n      if (type === \"comp\") {\n        ctx.textAlign = \"center\";\n        ctx.fillText(\n          \"Person Name\",\n          coordinates.name[1] + coordinates.name[2] / 2,\n          coordinates.name[0]\n        );\n        ctx.fillText(\n          \"Event Name\",\n          coordinates.event[1] + coordinates.event[2] / 2,\n          coordinates.event[0]\n        );\n        ctx.fillText(\n          \"01/01/2021\",\n          coordinates.date[1] + coordinates.date[2] / 2,\n          coordinates.date[0]\n        );\n        ctx.fillText(\n          \"1st\",\n          coordinates.position[1] + coordinates.position[2] / 2,\n          coordinates.position[0]\n        );\n      }\n    };\n  }, [final]);\n\n  const emailHandler = async (e) => {\n    if (csv === \"\") {\n      alert(\"No csv uploaded!\");\n      return;\n    }\n    e.preventDefault();\n    console.log(\"hello\");\n\n    setShow(true);\n    console.log(certUrl);\n    // for (var i = 0; i < arr2.length; i++) {\n\n    //   var user = arr2[i]\n    //   console.log(\"Sending:\", user);\n    var data = {\n      subject,\n      content,\n      arr2,\n      certUrl,\n      type,\n      coordinates,\n    };\n    await axios\n      .post(\"http://localhost:5000/api/sendmail/cert/\", data)\n      .then((res) => setEmailCount((c) => c + 1))\n      .catch((err) => console.log(err.message));\n\n    setShow(false);\n  };\n\n  const onSubmit = async (e) => {\n    if (csv === \"\") {\n      alert(\"No csv uploaded!\");\n      return;\n    }\n    e.preventDefault();\n    const formData = new FormData();\n    formData.append(\"csv\", csv);\n\n    await axios\n      .post(\"http://localhost:5000/api/csv/csv-upload\", formData, {})\n      .then((res: any) => {\n        setArr2([]);\n        setArr2(res.data);\n        console.log(res.data);\n        const modalClose = document.getElementById(\"modalClose\");\n        modalClose.click();\n      });\n  };\n\n  function download() {\n    if (csv === \"\") {\n      alert(\"No csv uploaded!\");\n      return;\n    }\n    console.log(arr2);\n    arr2.map((element) => {\n      console.log(element);\n      const elementCanvas = document.createElement(\"canvas\");\n      elementCanvas.setAttribute(\"ref\", element.name);\n      const canvasObj = canvasRef.current;\n      const ctx = canvasObj.getContext(\"2d\");\n      canvasObj.width = 700;\n      canvasObj.height = 500;\n\n      var background = new Image();\n      background.setAttribute(\"crossOrigin\", \"anonymous\");\n      background.src = certUrl;\n\n      background.onload = function () {\n        ctx.drawImage(background, 0, 0, 700, 500);\n\n        ctx.font = \"20px Arial\";\n        ctx.textAlign = \"center\";\n        ctx.textBaseline = \"top\";\n        ctx.fillStyle = \"black\";\n        if (type === \"wc\" || type === \"mc\") {\n          ctx.fillText(\n            element.name,\n            coordinates.name[1] + coordinates.name[2] / 2,\n            coordinates.name[0]\n          );\n        }\n\n        if (type === \"org\") {\n          ctx.fillText(\n            element.name,\n            coordinates.name[1] + coordinates.name[2] / 2,\n            coordinates.name[0]\n          );\n\n          ctx.fillText(\n            element.event,\n            coordinates.event[1] + coordinates.event[2] / 2,\n            coordinates.event[0]\n          );\n          ctx.fillText(\n            element.event_date,\n            coordinates.date[1] + coordinates.date[2] / 2,\n            coordinates.date[0]\n          );\n        }\n        if (type === \"comp\") {\n          ctx.fillText(\n            element.name,\n            coordinates.name[1] + coordinates.name[2] / 2,\n            coordinates.name[0]\n          );\n          ctx.fillText(\n            element.event,\n            coordinates.event[1] + coordinates.event[2] / 2,\n            coordinates.event[0]\n          );\n          ctx.fillText(\n            element.event_date,\n            coordinates.date[1] + coordinates.date[2] / 2,\n            coordinates.date[0]\n          );\n          ctx.fillText(\n            element.position,\n            coordinates.position[1] + coordinates.position[2] / 2,\n            coordinates.position[0]\n          );\n        }\n\n        var canvas2: any = document.getElementById(\"myCanvas\");\n        var url = canvas2.toDataURL(\"image/png\");\n\n        var link = document.createElement(\"a\");\n        link.download = `${element.name}.png`;\n        link.href = url;\n        link.click();\n      };\n    });\n    const elementCanvas = document.createElement(\"canvas\");\n    elementCanvas.classList.add(\"hide-canvas\");\n\n    elementCanvas.setAttribute(\"ref\", \"canvasRef\");\n    const canvasObj = canvasRef.current;\n    const ctx = canvasObj.getContext(\"2d\");\n    canvasObj.width = 700;\n    canvasObj.height = 500;\n\n    var background = new Image();\n    background.setAttribute(\"crossOrigin\", \"anonymous\");\n    background.src = certUrl;\n\n    background.onload = function () {\n      ctx.drawImage(background, 0, 0, 700, 500);\n\n      ctx.font = \"20px Arial\";\n      ctx.textAlign = \"left\";\n      ctx.textBaseline = \"top\";\n      ctx.fillStyle = \"black\";\n\n      if (type === \"wc\" || type === \"mc\") {\n        ctx.fillText(\"Person Name\", coordinates.name[1], coordinates.name[0]);\n      }\n    };\n  }\n  return (\n    <div className=\"container\">\n      <Navbar2 />\n      <div className=\"row\">\n        <a className=\"modal-open\" href=\"#modal\">\n          <button className=\"home-button\">Upload CSV File</button>\n        </a>\n        <button className=\"home-button\" onClick={download}>\n          Download All\n        </button>\n        <a className=\"modal-open\" href=\"#modal2\">\n          <button className=\"home-button\">Mail Certifcates</button>\n        </a>\n        <div className=\"modal\" id=\"modal\">\n          <div className=\"modal-content\">\n            <a\n              href=\"#\"\n              className=\"modal-close\"\n              id=\"modalClose\"\n              title=\"Close Modal\"\n            >\n              X\n            </a>\n            <h3 className=\"modal-title\">Upload CSV File</h3>\n            <div className=\"modal-area\">\n              <div className=\"row\">\n                <form onSubmit={onSubmit} id=\"csvForm\">\n                  <div className=\"form-group\">\n                    <input\n                      className=\"upload-input\"\n                      type=\"file\"\n                      onChange={onFileChange}\n                    />\n                  </div>\n                  <div className=\"form-group\">\n                    <button className=\"upload-button\" type=\"submit\">\n                      Upload\n                    </button>\n                  </div>\n                </form>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"modal\" id=\"modal2\">\n          <div className=\"modal-content\">\n            <a\n              href=\"#\"\n              className=\"modal-close\"\n              id=\"modalClose\"\n              title=\"Close Modal\"\n            >\n              X\n            </a>\n            <h3 className=\"modal-title\">Mail Certificates</h3>\n            <div className=\"modal-area\">\n              {show ? (\n                <div className=\"count\">\n                  Sending mails... <br />\n                  Sent {emailCount}/{arr2.length} mails\n                </div>\n              ) : null}\n              <div className=\"row\">\n                <form onSubmit={emailHandler}>\n                  <div className=\"form-group\">\n                    <div>\n                      <input\n                        className=\"mail-input\"\n                        placeholder=\"Enter Subject\"\n                        required\n                        type=\"text\"\n                        onChange={(e) => setSubject(e.target.value)}\n                      ></input>\n                    </div>\n                    <div>\n                      <input\n                        className=\"mail-input\"\n                        placeholder=\"Enter Content For Mail\"\n                        type=\"text\"\n                        onChange={(e) => setContent(e.target.value)}\n                      ></input>\n                    </div>\n                  </div>\n                  <div className=\"form-group\">\n                    <button className=\"upload-button\" type=\"submit\">\n                      Send Mail\n                    </button>\n                  </div>\n                </form>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"csv-inst\">\n        {(type === \"wc\" || type === \"mc\") && (\n          <div>\n            The csv uploaded should contain 2 columns only, one column with\n            heading <b>name</b> and one with heading <b>email</b>.{\" \"}\n          </div>\n        )}\n        {type === \"org\" && (\n          <div>\n            The csv uploaded should contain 4 columns only, with headings-{\" \"}\n            <b>name</b>, <b>email</b>,<b>event_name</b>,<b>date</b>.{\" \"}\n          </div>\n        )}\n        {type === \"comp\" && (\n          <div>\n            The csv uploaded should contain 5 columns only, with headings-{\" \"}\n            <b>name</b>, <b>email</b>,<b>event_name</b>,<b>date</b>,\n            <b>position</b>.{\" \"}\n          </div>\n        )}\n      </div>\n      <div className=\"canvas-container\">\n        <canvas\n          ref={canvasRef}\n          id=\"myCanvas\"\n          className=\"cnvas2\"\n          width=\"700\"\n          height=\"200\"\n        ></canvas>\n      </div>\n    </div>\n  );\n}\n","C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\Context\\reducer.tsx",[],"C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\Pages\\SignUp\\signup.tsx",[],"C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\Pages\\Verify\\verify.tsx",["104","105"],"import axios from \"axios\";\r\nimport React, { useState, useEffect } from \"react\";\r\n\r\nimport Navbar2 from \"../Navbar2/Navbar2\";\r\n\r\ninterface Props {}\r\n\r\nconst Verify = (props) => {\r\n  const current_url = window.location.href;\r\n  const param_array = current_url.split(\"/\");\r\n  const id = param_array[4];\r\n  console.log(id);\r\n  const url = \"http://localhost:5000\";\r\n  const data = {\r\n    id,\r\n  };\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .patch(url + \"/api/auth/verifyacc\", data)\r\n      .then(\r\n        (res: any) =>\r\n          (res.data.status === \"success\"\r\n            ?(\r\n              console.log(res.data),\r\n              setMsg(\"Account Verrified Successfully!\"),\r\n              setTimeout(function(){\r\n                window.location.href=\"../login\"\r\n              }, 2000)\r\n              \r\n              )\r\n            : setMsg(res.data.error))\r\n      )\r\n      .catch((err) => setMsg(err.message));\r\n\r\n  }, []);\r\n\r\n  const [msg, setMsg] = useState<string>(\"\");\r\n\r\n  return (\r\n    <div>\r\n      <Navbar2 login={false} signup={false} />\r\n      <div className=\"main-c\">\r\n        <div className=\"bg-design\"></div>\r\n        <div className=\"login-h verify-msg\">\r\n          {\" \"}\r\n          {msg !== \"\" ? <div>{msg}</div> : null}\r\n        </div>\r\n\r\n        {/* <form className=\"log-form\">\r\n            <div>\r\n              <input\r\n                className=\"form-item\"\r\n                type=\"email\"\r\n                onChange={(e) => setPass(e.target.value)}\r\n                placeholder=\"Enter new password\"\r\n              />\r\n            </div>\r\n            <button\r\n              className=\"submit-btn\"\r\n              onClick={(e) => {\r\n                e.preventDefault();\r\n                handleSubmit();\r\n              }}\r\n            >\r\n              Submit\r\n            </button>\r\n          </form> */}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Verify;\r\n",{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","replacedBy":"109"},{"ruleId":"110","severity":1,"message":"111","line":22,"column":11,"nodeType":"112","messageId":"113","endLine":22,"endColumn":14},{"ruleId":"110","severity":1,"message":"114","line":34,"column":21,"nodeType":"112","messageId":"113","endLine":34,"endColumn":33},{"ruleId":"115","severity":1,"message":"116","line":51,"column":6,"nodeType":"117","endLine":51,"endColumn":8,"suggestions":"118"},{"ruleId":"115","severity":1,"message":"119","line":132,"column":6,"nodeType":"117","endLine":132,"endColumn":13,"suggestions":"120"},{"ruleId":"121","severity":1,"message":"122","line":190,"column":24,"nodeType":"123","messageId":"124","endLine":190,"endColumn":26},{"ruleId":"125","severity":1,"message":"126","line":309,"column":13,"nodeType":"127","endLine":314,"endColumn":14},{"ruleId":"125","severity":1,"message":"126","line":341,"column":13,"nodeType":"127","endLine":346,"endColumn":14},{"ruleId":"110","severity":1,"message":"128","line":6,"column":11,"nodeType":"112","messageId":"113","endLine":6,"endColumn":16},{"ruleId":"115","severity":1,"message":"129","line":36,"column":6,"nodeType":"117","endLine":36,"endColumn":8,"suggestions":"130"},"no-native-reassign",["131"],"no-negated-in-lhs",["132"],"@typescript-eslint/no-unused-vars","'res' is assigned a value but never used.","Identifier","unusedVar","'setPositionW' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.","ArrayExpression",["133"],"React Hook useEffect has missing dependencies: 'certUrl', 'coordinates', and 'type'. Either include them or remove the dependency array.",["134"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'Props' is defined but never used.","React Hook useEffect has a missing dependency: 'data'. Either include it or remove the dependency array.",["135"],"no-global-assign","no-unsafe-negation",{"desc":"136","fix":"137"},{"desc":"138","fix":"139"},{"desc":"140","fix":"141"},"Update the dependencies array to be: [id]",{"range":"142","text":"143"},"Update the dependencies array to be: [certUrl, coordinates, final, type]",{"range":"144","text":"145"},"Update the dependencies array to be: [data]",{"range":"146","text":"147"},[1453,1455],"[id]",[3678,3685],"[certUrl, coordinates, final, type]",[912,914],"[data]"]