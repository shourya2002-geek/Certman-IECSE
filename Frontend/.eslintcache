[{"C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\index.tsx":"1","C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\reportWebVitals.ts":"2","C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\App.tsx":"3","C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\Config\\routes.ts":"4","C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\Components\\AppRoute.tsx":"5","C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\Pages\\Forgot\\ForgotPassword.tsx":"6","C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\Pages\\Forgot\\ResetPassword.tsx":"7","C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\Context\\index.tsx":"8","C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\Pages\\Home\\Home.tsx":"9","C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\Pages\\Navbar2\\Navbar2.tsx":"10","C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\Pages\\Login\\index.tsx":"11","C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\Pages\\NotFound\\index.tsx":"12","C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\Pages\\Dashboard\\index.tsx":"13","C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\Pages\\Generate\\index.tsx":"14","C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\Pages\\User_Uploads\\index.tsx":"15","C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\Pages\\Upload\\index.tsx":"16","C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\Context\\actions.tsx":"17","C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\Context\\context.tsx":"18","C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\Pages\\SingleCert\\index.tsx":"19","C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\Context\\reducer.tsx":"20","C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\Pages\\SignUp\\signup.tsx":"21","C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\Pages\\Verify\\verify.tsx":"22"},{"size":500,"mtime":1637982889584,"results":"23","hashOfConfig":"24"},{"size":425,"mtime":1637982890529,"results":"25","hashOfConfig":"24"},{"size":1304,"mtime":1638942055037,"results":"26","hashOfConfig":"24"},{"size":1121,"mtime":1638940046010,"results":"27","hashOfConfig":"24"},{"size":526,"mtime":1637982889175,"results":"28","hashOfConfig":"24"},{"size":2096,"mtime":1638946933869,"results":"29","hashOfConfig":"24"},{"size":3154,"mtime":1638946971310,"results":"30","hashOfConfig":"24"},{"size":233,"mtime":1637982889459,"results":"31","hashOfConfig":"24"},{"size":592,"mtime":1638255866727,"results":"32","hashOfConfig":"24"},{"size":2761,"mtime":1638947254341,"results":"33","hashOfConfig":"24"},{"size":3099,"mtime":1638947108221,"results":"34","hashOfConfig":"24"},{"size":223,"mtime":1637982890092,"results":"35","hashOfConfig":"24"},{"size":1067,"mtime":1638946904395,"results":"36","hashOfConfig":"24"},{"size":999,"mtime":1638947087474,"results":"37","hashOfConfig":"24"},{"size":1493,"mtime":1638948166808,"results":"38","hashOfConfig":"24"},{"size":17287,"mtime":1639090512486,"results":"39","hashOfConfig":"24"},{"size":1783,"mtime":1638946649289,"results":"40","hashOfConfig":"24"},{"size":971,"mtime":1637982889426,"results":"41","hashOfConfig":"24"},{"size":11307,"mtime":1638947842193,"results":"42","hashOfConfig":"24"},{"size":1542,"mtime":1638946705142,"results":"43","hashOfConfig":"24"},{"size":3754,"mtime":1639090702394,"results":"44","hashOfConfig":"24"},{"size":1869,"mtime":1639091233677,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"h0escr",{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"48"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"48"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93"},"C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\index.tsx",[],["94","95"],"C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\reportWebVitals.ts",[],"C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\App.tsx",[],"C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\Config\\routes.ts",[],"C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\Components\\AppRoute.tsx",[],"C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\Pages\\Forgot\\ForgotPassword.tsx",[],"C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\Pages\\Forgot\\ResetPassword.tsx",[],"C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\Context\\index.tsx",[],"C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\Pages\\Home\\Home.tsx",[],"C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\Pages\\Navbar2\\Navbar2.tsx",[],"C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\Pages\\Login\\index.tsx",["96"],"import React, { useState } from \"react\";\n\nimport { loginUser, useAuthState, useAuthDispatch } from \"../../Context\";\n// import styles from \"./login.module.css\";\nimport Navbar2 from \"../Navbar2/Navbar2\";\nimport \"./login.css\";\nimport { AiFillEyeInvisible } from \"react-icons/ai\";\nimport { Link } from \"react-router-dom\";\n\nfunction Login(props) {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [visible, setVisible] = useState(false);\n\n  const dispatch = useAuthDispatch();\n  const { loading, errorMessage, successMessage }: any = useAuthState();\n\n  const handleLogin = async (e) => {\n    e.preventDefault();\n\n    try {\n      let res = await loginUser(dispatch, { email, password });\n      let user = localStorage.getItem(\"currentUser\")\n        ? JSON.parse(localStorage.getItem(\"currentUser\")).name\n        : \"\";\n      if (user) {\n        props.history.push(\"/dashboard\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  function toggleVisible(e) {\n    e.preventDefault();\n    setVisible(!visible);\n  }\n  return (\n    <>\n      <div>\n        <Navbar2 login={true} signup={false} />\n        <div className=\"main-c\">\n          <div className=\"bg-design\"></div>\n          <div className=\"login-box\">\n            <div className=\"login-h\">\n              An <span className=\"blue\">in-house</span> certificate generator.\n            </div>\n            <div>\n              {errorMessage ? <p className=\"error\">{errorMessage}</p> : null}\n\n              {successMessage ? (\n                <p className=\"success\">{successMessage}</p>\n              ) : null}\n            </div>\n\n            <form className=\"log-form\">\n              <div>\n                <input\n                  className=\"form-item\"\n                  type=\"email\"\n                  id=\"email\"\n                  value={email}\n                  placeholder=\"Enter Email\"\n                  onChange={(e) => setEmail(e.target.value)}\n                />\n              </div>\n              <div>\n                <input\n                  className=\"form-item\"\n                  type={visible ? \"text\" : \"password\"}\n                  placeholder=\"Enter Password\"\n                  id=\"password\"\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  disabled={loading}\n                />\n                <button\n                  className=\"toggle-button\"\n                  onClick={(e) => toggleVisible(e)}\n                >\n                  <AiFillEyeInvisible />\n                </button>\n              </div>\n              <button\n                className=\"submit-btn\"\n                type=\"submit\"\n                onClick={handleLogin}\n                disabled={loading}\n              >\n                Login\n              </button>\n              <div className=\"forgot\">\n                <Link to={\"/forgot\"} className=\"f-link\">\n                  Forgot Password?\n                </Link>\n              </div>\n            </form>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Login;\n","C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\Pages\\NotFound\\index.tsx",[],"C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\Pages\\Dashboard\\index.tsx",[],"C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\Pages\\Generate\\index.tsx",[],"C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\Pages\\User_Uploads\\index.tsx",[],"C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\Pages\\Upload\\index.tsx",[],"C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\Context\\actions.tsx",[],"C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\Context\\context.tsx",[],"C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\Pages\\SingleCert\\index.tsx",["97","98","99","100","101"],"import React, { useState, useEffect, useRef } from \"react\";\nimport \"../Dashboard/dashboard.css\";\nimport axios from \"axios\";\nimport Navbar2 from \"../Navbar2/Navbar2\";\nimport QRCode from \"qrcode\";\nimport qrcode_1 from \"../../images/qrcode.png\";\nimport './singlecert.css';\n\nexport default function SingleImage(props) {\n  const id = window.location.pathname.split(\"/\")[2];\n  QRCode.toDataURL(\"https://www.google.com/\")\n    .then((url) => {\n      // setLink(url);\n    })\n    .catch((err) => {\n      console.error(err);\n    });\n\n  // With async/await\n\n  const [csv, setCsv] = useState(\"\");\n  const [certUrl, setCertUrl] = useState(\"\");\n  const [arr2, setArr2] = useState([]);\n  const [subject, setSubject] = useState(\"\");\n  const [content, setContent] = useState(\"\");\n\n  const [coordinates, setCoordinates] = useState<any>([]);\n  const [show, setShow] = useState(false);\n  const [emailCount, setEmailCount] = useState(0);\n  const [final, setFinal] = useState(false);\n  const [type, setType] = useState(\"\");\n\n  const canvasRef = useRef(null);\n\n  \n\n  function onFileChange(e) {\n    setCsv(e.target.files[0]);\n  }\n\n  useEffect(() => {\n    axios\n      .get(\"http://localhost:5000/api/cert/\" + id)\n      .then((response: any) => {\n        setCertUrl(response.data.certUrl);\n        setCoordinates(response.data.coordinates);\n        setType(response.data.category);\n        setFinal(true);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }, []);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    canvas.width = 700;\n    canvas.height = 500;\n\n    var background = new Image();\n    background.setAttribute(\"crossOrigin\", \"anonymous\");\n    background.src = certUrl;\n\n    background.onload = function () {\n      ctx.drawImage(background, 0, 0, 700, 500);\n        var img = new Image();\n        img.src = qrcode_1;\n        ctx.drawImage(\n          img,\n          coordinates.qr[1],\n          coordinates.qr[0],\n          coordinates.qr[3],\n          coordinates.qr[2]\n        );\n      ctx.font = \"20px Arial\";\n      ctx.textAlign = \"left\";\n      ctx.textBaseline = \"top\";\n      ctx.fillStyle = \"black\";\n      // ctx.drawImage(qr, 20, 422,50,50);\n      // ctx.fillText(\"Personffffff\", 200, 200);\n\n      if (type === \"wc\" || type === \"mc\") {\n        ctx.fillText(\"Person Name\", coordinates.name[1], coordinates.name[0]);\n      }\n      if (type === \"org\") {\n        ctx.fillText(\"Person Name\", coordinates.name[1], coordinates.name[0]);\n        ctx.fillText(\"Event Name\", coordinates.event[1], coordinates.event[0]);\n        ctx.fillText(\"01/01/2021\", coordinates.date[1], coordinates.date[0]);\n      }\n      if (type === \"comp\") {\n        ctx.fillText(\"Person Name\", coordinates.name[1], coordinates.name[0]);\n        ctx.fillText(\"Event Name\", coordinates.event[1], coordinates.event[0]);\n        ctx.fillText(\"01/01/2021\", coordinates.date[1], coordinates.date[0]);\n        ctx.fillText(\"1st\", coordinates.postion[1], coordinates.postion[0]);\n      }\n    };\n  }, [final]);\n\n  const emailHandler = async (e) => {\n    if (csv === \"\") {\n      alert(\"No csv uploaded!\");\n      return;\n    }\n    e.preventDefault();\n    console.log(\"hello\");\n\n    setShow(true);\n    console.log(certUrl);\n    for (var i = 0; i < arr2.length; i++) {\n\n      var user = arr2[i]\n      console.log(\"Sending:\", user);\n      var data = {\n        subject,\n        content,\n        user,\n        certUrl,\n        type,\n        coordinates,\n      };\n      await axios\n        .post(\"http://localhost:5000/api/sendmail/cert/\", data)\n        .then((res) => ( setEmailCount((c) => c + 1)))\n        .catch((err) => console.log(err.message));\n    }\n    setShow(false);\n  };\n\n  const onSubmit = async (e) => {\n    if (csv === \"\") {\n      alert(\"No csv uploaded!\");\n      return;\n    }\n    e.preventDefault();\n    const formData = new FormData();\n    formData.append(\"csv\", csv);\n\n    await axios\n      .post(\"http://localhost:5000/api/csv/csv-upload\", formData, {})\n      .then((res: any) => {\n        setArr2([]);\n        setArr2(res.data);\n        console.log(res.data);\n        const modalClose = document.getElementById(\"modalClose\");\n        modalClose.click();\n      });\n  };\n\n  function download() {\n    if (csv === \"\") {\n      alert(\"No csv uploaded!\");\n      return;\n    }\n    console.log(arr2);\n    arr2.map((element) => {\n      const elementCanvas = document.createElement(\"canvas\");\n      elementCanvas.setAttribute(\"ref\", element.name);\n      const canvasObj = canvasRef.current;\n      const ctx = canvasObj.getContext(\"2d\");\n      canvasObj.width = 700;\n      canvasObj.height = 500;\n\n      var background = new Image();\n      background.setAttribute(\"crossOrigin\", \"anonymous\");\n      background.src = certUrl;\n\n      background.onload = function () {\n        ctx.drawImage(background, 0, 0, 700, 500);\n\n        ctx.font = \"20px Arial\";\n        ctx.textAlign = \"left\";\n        ctx.textBaseline = \"top\";\n        ctx.fillStyle = \"black\";\n\n        if (type === \"wc\" || type === \"mc\") {\n          ctx.fillText(element.name, coordinates.name[1], coordinates.name[0]);\n        }\n        if (type === \"wc\" || type === \"mc\") {\n          ctx.fillText(element.name, coordinates.name[1], coordinates.name[0]);\n        }\n        if (type === \"org\") {\n          ctx.fillText(element.name, coordinates.name[1], coordinates.name[0]);\n          ctx.fillText(\n            element.event_name,\n            coordinates.event[1],\n            coordinates.event[0]\n          );\n          ctx.fillText(element.date, coordinates.date[1], coordinates.date[0]);\n        }\n        if (type === \"comp\") {\n          ctx.fillText(element.name, coordinates.name[1], coordinates.name[0]);\n          ctx.fillText(\n            element.event_name,\n            coordinates.event[1],\n            coordinates.event[0]\n          );\n          ctx.fillText(element.date, coordinates.date[1], coordinates.date[0]);\n          ctx.fillText(\n            element.postion,\n            coordinates.postion[1],\n            coordinates.postion[0]\n          );\n        }\n\n        var canvas2: any = document.getElementById(\"myCanvas\");\n        var url = canvas2.toDataURL(\"image/png\");\n\n        var link = document.createElement(\"a\");\n        link.download = `${element.name}.png`;\n        link.href = url;\n        link.click();\n      };\n    });\n    const elementCanvas = document.createElement(\"canvas\");\n    elementCanvas.classList.add(\"hide-canvas\");\n\n    elementCanvas.setAttribute(\"ref\", \"canvasRef\");\n    const canvasObj = canvasRef.current;\n    const ctx = canvasObj.getContext(\"2d\");\n    canvasObj.width = 700;\n    canvasObj.height = 500;\n\n    var background = new Image();\n    background.setAttribute(\"crossOrigin\", \"anonymous\");\n    background.src = certUrl;\n\n    background.onload = function () {\n      ctx.drawImage(background, 0, 0, 700, 500);\n\n      ctx.font = \"20px Arial\";\n      ctx.textAlign = \"left\";\n      ctx.textBaseline = \"top\";\n      ctx.fillStyle = \"black\";\n\n      if (type === \"wc\" || type === \"mc\") {\n        ctx.fillText(\"Person Name\", coordinates.name[1], coordinates.name[0]);\n      }\n    };\n  }\n  return (\n    <div className=\"container\">\n      <Navbar2 />\n      <div className=\"row\">\n        <a className=\"modal-open\" href=\"#modal\">\n          <button className=\"home-button\">Upload CSV File</button>\n        </a>\n        <button className=\"home-button\" onClick={download}>\n          Download All\n        </button>\n        <a className=\"modal-open\" href=\"#modal2\">\n          <button className=\"home-button\">Mail Certifcates</button>\n        </a>\n        <div className=\"modal\" id=\"modal\">\n          <div className=\"modal-content\">\n            <a\n              href=\"#\"\n              className=\"modal-close\"\n              id=\"modalClose\"\n              title=\"Close Modal\"\n            >\n              X\n            </a>\n            <h3 className=\"modal-title\">Upload CSV File</h3>\n            <div className=\"modal-area\">\n              <div className=\"row\">\n                <form onSubmit={onSubmit} id=\"csvForm\">\n                  <div className=\"form-group\">\n                    <input\n                      className=\"upload-input\"\n                      type=\"file\"\n                      onChange={onFileChange}\n                    />\n                  </div>\n                  <div className=\"form-group\">\n                    <button className=\"upload-button\" type=\"submit\">\n                      Upload\n                    </button>\n                  </div>\n                </form>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"modal\" id=\"modal2\">\n          <div className=\"modal-content\">\n            <a\n              href=\"#\"\n              className=\"modal-close\"\n              id=\"modalClose\"\n              title=\"Close Modal\"\n            >\n              X\n            </a>\n            <h3 className=\"modal-title\">Mail Certificates</h3>\n            <div className=\"modal-area\">\n              {show ? (\n                <div className=\"count\">\n                  Sending mails... <br />\n                  Sent {emailCount}/{arr2.length} mails\n                </div>\n              ) : null}\n              <div className=\"row\">\n                <form onSubmit={emailHandler}>\n                  <div className=\"form-group\">\n                    <div>\n                      <input\n                        className=\"mail-input\"\n                        placeholder=\"Enter Subject\"\n                        required\n                        type=\"text\"\n                        onChange={(e) => setSubject(e.target.value)}\n                      ></input>\n                    </div>\n                    <div>\n                      <input\n                        className=\"mail-input\"\n                        placeholder=\"Enter Content For Mail\"\n                        type=\"text\"\n                        onChange={(e) => setContent(e.target.value)}\n                      ></input>\n                    </div>\n                  </div>\n                  <div className=\"form-group\">\n                    <button className=\"upload-button\" type=\"submit\">\n                      Send Mail\n                    </button>\n                  </div>\n                </form>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"csv-inst\">\n        {(type === \"wc\" || type === \"mc\") && (\n          <div>\n            The csv uploaded should contain 2 columns only, one column with\n            heading <b>name</b> and one with heading <b>email</b>.{\" \"}\n          </div>\n        )}\n        {type === \"org\" && (\n          <div>\n            The csv uploaded should contain 4 columns only, with headings-{\" \"}\n            <b>name</b>, <b>email</b>,<b>event_name</b>,<b>date</b>.{\" \"}\n          </div>\n        )}\n        {type === \"comp\" && (\n          <div>\n            The csv uploaded should contain 5 columns only, with headings-{\" \"}\n            <b>name</b>, <b>email</b>,<b>event_name</b>,<b>date</b>,\n            <b>postion</b>.{\" \"}\n          </div>\n        )}\n      </div>\n      <div className=\"canvas-container\">\n        <canvas\n          ref={canvasRef}\n          id=\"myCanvas\"\n          className=\"cnvas2\"\n          width=\"700\"\n          height=\"200\"\n        ></canvas>\n      </div>\n    </div>\n  );\n}\n","C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\Context\\reducer.tsx",[],"C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\Pages\\SignUp\\signup.tsx",[],"C:\\Users\\surya\\Desktop\\Repos\\Certman\\Frontend\\src\\Pages\\Verify\\verify.tsx",["102","103"],"import axios from \"axios\";\r\nimport React, { useState, useEffect } from \"react\";\r\n\r\nimport Navbar2 from \"../Navbar2/Navbar2\";\r\n\r\ninterface Props {}\r\n\r\nconst Verify = (props) => {\r\n  const current_url = window.location.href;\r\n  const param_array = current_url.split(\"/\");\r\n  const id = param_array[4];\r\n  console.log(id);\r\n  const url = \"http://localhost:5000\";\r\n  const data = {\r\n    id,\r\n  };\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .patch(url + \"/api/auth/verifyacc\", data)\r\n      .then(\r\n        (res: any) =>\r\n          (res.data.status === \"success\"\r\n            ?(\r\n              console.log(res.data),\r\n              setMsg(\"Account Verrified Successfully!\"),\r\n              setTimeout(function(){\r\n                window.location.href=\"../login\"\r\n              }, 2000)\r\n              \r\n              )\r\n            : setMsg(res.data.error))\r\n      )\r\n      .catch((err) => setMsg(err.message));\r\n\r\n  }, []);\r\n\r\n  const [msg, setMsg] = useState<string>(\"\");\r\n\r\n  return (\r\n    <div>\r\n      <Navbar2 login={false} signup={false} />\r\n      <div className=\"main-c\">\r\n        <div className=\"bg-design\"></div>\r\n        <div className=\"login-h verify-msg\">\r\n          {\" \"}\r\n          {msg !== \"\" ? <div>{msg}</div> : null}\r\n        </div>\r\n\r\n        {/* <form className=\"log-form\">\r\n            <div>\r\n              <input\r\n                className=\"form-item\"\r\n                type=\"email\"\r\n                onChange={(e) => setPass(e.target.value)}\r\n                placeholder=\"Enter new password\"\r\n              />\r\n            </div>\r\n            <button\r\n              className=\"submit-btn\"\r\n              onClick={(e) => {\r\n                e.preventDefault();\r\n                handleSubmit();\r\n              }}\r\n            >\r\n              Submit\r\n            </button>\r\n          </form> */}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Verify;\r\n",{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","severity":1,"message":"109","line":22,"column":11,"nodeType":"110","messageId":"111","endLine":22,"endColumn":14},{"ruleId":"112","severity":1,"message":"113","line":53,"column":6,"nodeType":"114","endLine":53,"endColumn":8,"suggestions":"115"},{"ruleId":"112","severity":1,"message":"116","line":98,"column":6,"nodeType":"114","endLine":98,"endColumn":13,"suggestions":"117"},{"ruleId":"118","severity":1,"message":"119","line":156,"column":24,"nodeType":"120","messageId":"121","endLine":156,"endColumn":26},{"ruleId":"122","severity":1,"message":"123","line":256,"column":13,"nodeType":"124","endLine":261,"endColumn":14},{"ruleId":"122","severity":1,"message":"123","line":288,"column":13,"nodeType":"124","endLine":293,"endColumn":14},{"ruleId":"108","severity":1,"message":"125","line":6,"column":11,"nodeType":"110","messageId":"111","endLine":6,"endColumn":16},{"ruleId":"112","severity":1,"message":"126","line":36,"column":6,"nodeType":"114","endLine":36,"endColumn":8,"suggestions":"127"},"no-native-reassign",["128"],"no-negated-in-lhs",["129"],"@typescript-eslint/no-unused-vars","'res' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.","ArrayExpression",["130"],"React Hook useEffect has missing dependencies: 'certUrl', 'coordinates.date', 'coordinates.event', 'coordinates.name', 'coordinates.postion', 'coordinates.qr', and 'type'. Either include them or remove the dependency array.",["131"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'Props' is defined but never used.","React Hook useEffect has a missing dependency: 'data'. Either include it or remove the dependency array.",["132"],"no-global-assign","no-unsafe-negation",{"desc":"133","fix":"134"},{"desc":"135","fix":"136"},{"desc":"137","fix":"138"},"Update the dependencies array to be: [id]",{"range":"139","text":"140"},"Update the dependencies array to be: [certUrl, coordinates.date, coordinates.event, coordinates.name, coordinates.postion, coordinates.qr, final, type]",{"range":"141","text":"142"},"Update the dependencies array to be: [data]",{"range":"143","text":"144"},[1457,1459],"[id]",[3028,3035],"[certUrl, coordinates.date, coordinates.event, coordinates.name, coordinates.postion, coordinates.qr, final, type]",[912,914],"[data]"]